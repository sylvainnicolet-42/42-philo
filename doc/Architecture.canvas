{
	"nodes":[
		{"type":"group","id":"e32068bd5faf2d7e","x":800,"y":1040,"width":842,"height":940,"color":"2","label":"Structures"},
		{"type":"group","id":"b1ee01fbe8ad6614","x":40,"y":0,"width":1440,"height":360,"color":"2","label":"Cycle"},
		{"type":"group","id":"53e033c846ab26d8","x":440,"y":-640,"width":440,"height":535,"color":"3","label":"Functions"},
		{"type":"file","file":"Assign forks.png","id":"ab3e2d86195bd3b8","x":3050,"y":1557,"width":578,"height":467},
		{"type":"file","file":"Lexique.md","id":"0435a6e7e3f9af98","x":1540,"y":-433,"width":1082,"height":1123},
		{"type":"text","text":"eat\n- take left and right fork\n- eat for [time_to_eat]\n- (put a counter)\n- put back left and right fork","id":"2026e87a4ce4ad1d","x":443,"y":60,"width":302,"height":220},
		{"type":"file","file":"Functions.png","id":"7a3b4f050437041b","x":460,"y":-340,"width":400,"height":215},
		{"type":"text","text":"Example\n```c\n#include <pthread.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid *thread_func(void *arg)\n{\n    int value = *((int *) arg);\n    printf(\"Thread created with value %d\\n\", value);\n    pthread_exit(NULL);\n}\n\nint main()\n{\n    pthread_t thread;\n    int arg = 42;\n\n    pthread_create(&thread, NULL, thread_func, &arg);\n\n    printf(\"Created thread %ld\\n\", thread);\n\n    pthread_join(thread, NULL);\n\n    printf(\"Thread joined\\n\");\n\n    return 0;\n}\n\n```","id":"a3a1fb15faa2d8af","x":922,"y":-778,"width":558,"height":693},
		{"type":"text","text":"think\n- think until left and right fork are available","id":"c9c2724fcf1e9fbf","x":120,"y":60,"width":270,"height":220},
		{"type":"text","text":"## Allowed functions\nmemset, printf, malloc, free, write, usleep, gettimeofday, pthread_create, pthread_detach, pthread_join, pthread_mutex_init, pthread_mutex_destroy, pthread_mutex_lock, pthread_mutex_unlock","id":"dee23c3c78356412","x":460,"y":-620,"width":400,"height":240},
		{"type":"text","text":"## Init forks [fork_locks]\n- Create array of forks depending number of philosophers.","id":"446b0b6fab2565a5","x":2540,"y":2080,"width":510,"height":100},
		{"type":"text","text":"## Init env\n- nb_philos\n- time_to_die\n- time_to_eat\n- time_to_sleep\n- must_eat_count\n- is_over","id":"25c176d76a99d2d7","x":2040,"y":1200,"width":240,"height":280},
		{"type":"text","text":"## Init philo [philosophers]\n- env\n- id\n- nb_meal_eaten\n- meal_time_lock 🔒","id":"688460d996216094","x":2290,"y":1480,"width":340,"height":220},
		{"type":"text","text":"## Assign fork[2]\n- Assign 2 forks to each philosopher.\n- Generate forks id.","id":"1ba17538a760fe8b","x":2570,"y":1715,"width":360,"height":150},
		{"type":"text","text":"## Init mutexes\n- simulation_stop_lock 🔒\n- write_lock 🔒","id":"7713a69e970f1322","x":2290,"y":1900,"width":280,"height":160},
		{"type":"text","text":"## Check inputs","id":"dec22d96189c0a24","x":2040,"y":1120,"width":240,"height":60},
		{"type":"text","text":"# main","id":"29dcd068115599b2","x":1820,"y":940,"width":140,"height":60},
		{"type":"text","text":"# env\n```c\ntypedef struct s_env  \n{  \nint must_eat_count;  \nunsigned int nb_philos;  \nunsigned int is_over;  \ntime_t time_to_die;  \ntime_t time_to_eat;  \ntime_t time_to_sleep;  \ntime_t start_time;  \nt_philo **philosophers;  \npthread_t monitoring;  \npthread_mutex_t simulation_stop_lock;  \npthread_mutex_t write_lock;  \npthread_mutex_t *fork_locks;  \n} t_env;\n```","id":"bd770dd3d95729e0","x":820,"y":1060,"width":420,"height":480},
		{"type":"text","text":"## Think\n1. Lock meal_time_lock 🔒\n2. ...\n3. Unlock meal_time_lock 🔓\n4. ...\n5. Thinking 📝","id":"252e39712fd33aa3","x":3720,"y":2520,"width":520,"height":280},
		{"type":"text","text":"## Start philo_routine 🧵\n- last_meal\n\n1. Set `last_meal`\n2. Starting with delay to make sure that all the philosophers are ready to start the simulation at the same time.\n3. Check if there is one philosopher.","id":"593378ef8be47bd5","x":2360,"y":2520,"width":520,"height":280},
		{"type":"text","text":"1. nb_philos ✅\n2. time_to_die ✅\n3. time_to_eat ✅\n4. time_to_sleep ✅\n5. must_eat_count ✅\n6. is_over ✅\n7. start_time ✅\n8. philosophers ✅\n9. monitoring 🧵\n10. simulation_stop_lock 🔒✅\n11. write_lock 🔒✅\n12. fork_locks 🔒✅","id":"1719ad939b586b3d","x":1302,"y":1100,"width":320,"height":400},
		{"type":"text","text":"1. id ✅\n2. nb_meal_eaten ✅\n3. fork[2] ✅\n4. last_meal ✅\n5. env ✅\n6. thread 🧵✅\n7. meal_time_lock 🔒✅","id":"f0564630f93de66e","x":1302,"y":1660,"width":320,"height":260},
		{"type":"text","text":"# philo\n```c\ntypedef struct s_philo  \n{  \nunsigned int id;  \nunsigned int nb_meal_eaten;  \nunsigned int fork[2];  \ntime_t last_meal;  \nt_env *env;  \npthread_t thread;  \npthread_mutex_t meal_time_lock;  \n} t_philo;\n```","id":"0f1d05fd63fa31a7","x":820,"y":1620,"width":420,"height":340},
		{"type":"text","text":"sleep\n- sleep for [time_to_sleep]","id":"73f156db3c677dce","x":798,"y":60,"width":280,"height":220},
		{"type":"text","text":"think\n- think until left and right fork are available","id":"3869ba962a6dd5b7","x":1130,"y":60,"width":270,"height":220},
		{"type":"text","text":"## Eat & sleep\n1. Lock fork_locks[philo->fork[0]] 🔒\n2. Fork 📝\n3. Lock fork_locks[philo->fork[1]] 🔒\n4. Fork 📝\n5. Eating 📝\n6. Lock meal_time_lock 🔒\n7. Update `last_meal`\n8. Unlock meal_time_lock 🔓\n9. Wait `time_to_eat` using philo_sleep()\n10. Lock meal_time_lock 🔒\n11. `nb_meal_eaten++`\n12. Unlock meal_time_lock 🔓\n13. Sleeping 📝\n14. Unlock fork_locks[philo->fork[1]] 🔓\n15. Unlock fork_locks[philo->fork[0]] 🔓\n16. Wait `time_to_sleep` using philo_sleep()","id":"0774e48f39b2a921","x":3050,"y":2720,"width":520,"height":540},
		{"type":"text","text":"## Start monitoring 🧵\n1. Starting with delay to make sure that all the philosophers are ready to start the simulation at the same time.","id":"ae6c05b045a0ae4c","x":2360,"y":3260,"width":520,"height":140},
		{"type":"text","text":"## Check if end condition is reached\nFor each philosopher:\n1. Lock meal_time_lock 🔒\n2. Checks if a philosopher needs to be killed\n\t1. If yes, stop simulation ❌\n3. Checks if a philosopher has eaten enough\n4. Unlock meal_time_lock 🔓\n\nCheck if all philosophers have eaten enough.\nIf yes, stop simulation ❌\n","id":"b42ef3b626976d7b","x":2790,"y":3440,"width":450,"height":350},
		{"type":"text","text":"## Arguments\n- number_of_philosophers\n- time_to_die\n- time_to_eat\n- time_to_sleep\n- *number_of_times_each_philosopher_must_eat*","id":"46a2cd5d8b567846","x":1540,"y":-778,"width":440,"height":240},
		{"type":"text","text":"## End of simulation\n- If a philosopher dies\n- If all philosophers have eaten enough","id":"64ef8a140e406501","x":2060,"y":-778,"width":440,"height":240},
		{"type":"text","text":"## Alone\n1. Lock fork_locks[philo->fork[0]] 🔒\n2. Fork 📝\n3. Wait `time_to_die` using philo_sleep()\n4. Died 📝\n5. Unlock fork_locks[philo->fork[0] 🔓\n6. Stop ❌\n\n","id":"e47254465e0571a3","x":3050,"y":2320,"width":520,"height":280},
		{"type":"text","text":"## Kill philosopher\n1. Check if philosopher is dead\n\t1. If yes, Died 📝\n\n","id":"e3edafe6774225ec","x":3310,"y":3545,"width":310,"height":140},
		{"type":"text","text":"## Stop simulation\nJoins philosophers threads 🧵\nJoins monitoring thread 🧵","id":"9b7b855714c80113","x":2040,"y":3445,"width":360,"height":140},
		{"type":"text","text":"## Destroy mutextes","id":"c9c748e23958fad3","x":2340,"y":3625,"width":280,"height":60},
		{"type":"text","text":"## Free env","id":"52495d44bb91034c","x":2340,"y":3725,"width":280,"height":50},
		{"type":"text","text":"## Start simulation\n- start_time\n\n1. Create a thread for each philosopher.\n2. Create a thread for monitoring if philosophers > 1.","id":"39a195c7266bf4d9","x":2040,"y":2180,"width":360,"height":220}
	],
	"edges":[
		{"id":"11b6e10176e5ae14","fromNode":"2026e87a4ce4ad1d","fromSide":"right","toNode":"73f156db3c677dce","toSide":"left"},
		{"id":"404bc2658684c00a","fromNode":"73f156db3c677dce","fromSide":"right","toNode":"3869ba962a6dd5b7","toSide":"left"},
		{"id":"25445e3913878c1a","fromNode":"c9c2724fcf1e9fbf","fromSide":"right","toNode":"2026e87a4ce4ad1d","toSide":"left"},
		{"id":"d34882a6e2ed1f80","fromNode":"bd770dd3d95729e0","fromSide":"right","toNode":"1719ad939b586b3d","toSide":"left"},
		{"id":"bb990c01fc71756b","fromNode":"0f1d05fd63fa31a7","fromSide":"right","toNode":"f0564630f93de66e","toSide":"left"},
		{"id":"a3d21b3c807c81d8","fromNode":"29dcd068115599b2","fromSide":"bottom","toNode":"dec22d96189c0a24","toSide":"left"},
		{"id":"2a25608b0ee76059","fromNode":"29dcd068115599b2","fromSide":"bottom","toNode":"25c176d76a99d2d7","toSide":"left"},
		{"id":"1e9360cbcc9ebc1c","fromNode":"29dcd068115599b2","fromSide":"bottom","toNode":"39a195c7266bf4d9","toSide":"left"},
		{"id":"b1958cbb55343240","fromNode":"25c176d76a99d2d7","fromSide":"bottom","toNode":"688460d996216094","toSide":"left"},
		{"id":"5a24811667fd251d","fromNode":"688460d996216094","fromSide":"bottom","toNode":"1ba17538a760fe8b","toSide":"left"},
		{"id":"82564fe9cd29af3c","fromNode":"1ba17538a760fe8b","fromSide":"right","toNode":"ab3e2d86195bd3b8","toSide":"left"},
		{"id":"3df130f4d1be388b","fromNode":"7713a69e970f1322","fromSide":"bottom","toNode":"446b0b6fab2565a5","toSide":"left"},
		{"id":"6211839a068b3419","fromNode":"25c176d76a99d2d7","fromSide":"bottom","toNode":"7713a69e970f1322","toSide":"left"},
		{"id":"99d5186d347e06fd","fromNode":"39a195c7266bf4d9","fromSide":"bottom","toNode":"593378ef8be47bd5","toSide":"left"},
		{"id":"34156e28672c1bb4","fromNode":"29dcd068115599b2","fromSide":"bottom","toNode":"9b7b855714c80113","toSide":"left"},
		{"id":"d42dc914956fe80f","fromNode":"9b7b855714c80113","fromSide":"bottom","toNode":"c9c748e23958fad3","toSide":"left"},
		{"id":"1996d433b2d7066d","fromNode":"9b7b855714c80113","fromSide":"bottom","toNode":"52495d44bb91034c","toSide":"left"},
		{"id":"79e690fa589fbcfe","fromNode":"593378ef8be47bd5","fromSide":"right","toNode":"e47254465e0571a3","toSide":"left"},
		{"id":"858c0e497c75111b","fromNode":"593378ef8be47bd5","fromSide":"right","toNode":"0774e48f39b2a921","toSide":"left"},
		{"id":"82e224990bf3e5dc","fromNode":"0774e48f39b2a921","fromSide":"right","toNode":"252e39712fd33aa3","toSide":"left"},
		{"id":"5d1648db8ba1e672","fromNode":"593378ef8be47bd5","fromSide":"right","toNode":"252e39712fd33aa3","toSide":"left"},
		{"id":"38fe4a4393f1bc5e","fromNode":"39a195c7266bf4d9","fromSide":"bottom","toNode":"ae6c05b045a0ae4c","toSide":"left"},
		{"id":"52e999c8f93a18f5","fromNode":"ae6c05b045a0ae4c","fromSide":"bottom","toNode":"b42ef3b626976d7b","toSide":"left"},
		{"id":"17b93cad7e65acd1","fromNode":"b42ef3b626976d7b","fromSide":"right","toNode":"e3edafe6774225ec","toSide":"left"}
	]
}