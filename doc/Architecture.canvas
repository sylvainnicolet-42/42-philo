{
	"nodes":[
		{"id":"e712d411228ea729","x":3560,"y":180,"width":1118,"height":640,"type":"group","label":"thread"},
		{"type":"group","id":"b1ee01fbe8ad6614","x":40,"y":0,"width":1440,"height":360,"label":"Cycle"},
		{"type":"group","id":"910907885a0120d0","x":-480,"y":480,"width":1134,"height":330,"label":"Structures"},
		{"type":"group","id":"53e033c846ab26d8","x":-480,"y":-600,"width":440,"height":535,"label":"Functions"},
		{"type":"text","text":"## Allowed functions\nmemset, printf, malloc, free, write, usleep, gettimeofday, pthread_create, pthread_detach, pthread_join, pthread_mutex_init, pthread_mutex_destroy, pthread_mutex_lock, pthread_mutex_unlock","id":"dee23c3c78356412","x":-460,"y":-580,"width":400,"height":240},
		{"type":"text","text":"## env\n- time_to_die\n- time_to_eat\n- time_to_sleep\n- number_of_times_each_philosopher_must_eat\n- duration","id":"198e14d20155889f","x":-420,"y":510,"width":480,"height":260},
		{"type":"text","text":"## Arguments\n- number_of_philosophers\n- time_to_die\n- time_to_eat\n- time_to_sleep\n- *number_of_times_each_philosopher_must_eat*","id":"46a2cd5d8b567846","x":-480,"y":0,"width":440,"height":240},
		{"type":"text","text":"## States\n- eat\n- sleep\n- think\n- die","id":"77c0dbc35412be17","x":0,"y":-300,"width":440,"height":240},
		{"type":"file","file":"Functions.png","id":"7a3b4f050437041b","x":-460,"y":-300,"width":400,"height":215},
		{"type":"text","text":"## philo\n- id\n- left philo\n- right philo\n- env","id":"d6ef83775cdac0c9","x":100,"y":510,"width":480,"height":260},
		{"type":"text","text":"end of similuation\n- number_of_times_each_philosopher_must_eat","id":"64761c199004a5f4","x":938,"y":570,"width":440,"height":120,"color":"1"},
		{"type":"text","text":"die\n- time_to_die","id":"70927ef15300d652","x":938,"y":410,"width":200,"height":120,"color":"1"},
		{"type":"text","text":"eat\n- take left and right fork\n- eat for [time_to_eat]\n- (put a counter)\n- put back left and right fork","id":"2026e87a4ce4ad1d","x":443,"y":60,"width":302,"height":220},
		{"type":"text","text":"sleep\n- sleep for [time_to_sleep]","id":"73f156db3c677dce","x":798,"y":60,"width":280,"height":220},
		{"type":"text","text":"think\n- think until left and right fork are available","id":"c9c2724fcf1e9fbf","x":120,"y":60,"width":270,"height":220},
		{"type":"text","text":"think\n- think until left and right fork are available","id":"3869ba962a6dd5b7","x":1130,"y":60,"width":270,"height":220},
		{"id":"a3a1fb15faa2d8af","x":480,"y":-753,"width":558,"height":693,"type":"text","text":"Example\n```c\n#include <pthread.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid *thread_func(void *arg)\n{\n    int value = *((int *) arg);\n    printf(\"Thread created with value %d\\n\", value);\n    pthread_exit(NULL);\n}\n\nint main()\n{\n    pthread_t thread;\n    int arg = 42;\n\n    pthread_create(&thread, NULL, thread_func, &arg);\n\n    printf(\"Created thread %ld\\n\", thread);\n\n    pthread_join(thread, NULL);\n\n    printf(\"Thread joined\\n\");\n\n    return 0;\n}\n\n```"},
		{"type":"text","text":"thread_routine\n```c\nt_philo *p;  \n  \np = (t_philo *)job;  \nwhile (!p->par->ready)  \n   continue ;  \nif (p->id & 1)  \n   ft_usleep(p->par->t2e * 0.9 + 1);  \nwhile (!p->par->over)  \n{  \n   ft_eat(p);  \n   ft_sleep_and_think(p);  \n}\n```","id":"e3781bdc7018687d","x":3580,"y":345,"width":440,"height":370},
		{"type":"text","text":"ft_eat\nðŸ”’ pthread_mutex_lock --> ðŸ”“ ft_eat, ðŸ”“ someone_died\nðŸ”’ pthread_mutex_lock --> ðŸ”“ ft_eat, ðŸ”“ someone_died\n```c\npthread_mutex_lock(p->lf);  \nprint_routine(p, FORK);  \npthread_mutex_lock(p->rf);  \nprint_routine(p, FORK);  \np->meal = time_now();  \nft_usleep(p->par->t2e);  \nprint_routine(p, EAT);  \np->iter_num++;  \npthread_mutex_unlock(p->lf);  \npthread_mutex_unlock(p->rf);\n```","id":"fc05a5d9d8b20dfb","x":4178,"y":200,"width":480,"height":380},
		{"type":"text","text":"ft_sleep_and_think\n```c\nft_usleep(p->par->t2s);  \nprint_routine(p, SLEEP);  \nprint_routine(p, THINK);\n```","id":"69a20f51496800da","x":4178,"y":610,"width":480,"height":190},
		{"type":"text","text":"print_routine\nðŸ”’ pthread_mutex_lock --> ðŸ”“ print_routine\n```c\npthread_mutex_lock(p->par->death);  \nif (p->par->over)  \n{  \n   pthread_mutex_unlock(p->par->death);  \n   return ;}  \nprintf(\"%ldms %d %s\\n\", time_now() - p->thread_start, p->id, action);  \npthread_mutex_unlock(p->par->death);\n```","id":"870fd923d0b2f58d","x":4818,"y":538,"width":640,"height":335},
		{"type":"text","text":"someone_died\n```c\nprint_routine(p, DIE);  \np->par->over = 1;  \np->dead = 1;  \npthread_mutex_unlock(p->lf);  \npthread_mutex_unlock(p->rf);  \n```","id":"832e5ab84b5e4d0c","x":4186,"y":960,"width":420,"height":220},
		{"type":"text","text":"check_death\nðŸ”’ pthread_mutex_lock --> ðŸ”“ check_death\n```c\nlong int    now;  \n  \npthread_mutex_lock(p->par->death);  \nnow = time_now() - p->meal;  \nif (now >= p->par->t2d)  \n{  \n   pthread_mutex_unlock(p->par->death);  \n   return (someone_died(p));  \n}  \npthread_mutex_unlock(p->par->death);\n```","id":"8b9789b337f82d2b","x":3588,"y":895,"width":420,"height":350},
		{"type":"text","text":"check_meals\n```c\nif (p.par->check_meal  \n   && last == p.par->num - 1  \n   && p.iter_num == p.par->max_iter)  \n   return (ft_usleep(300));\nreturn (0);\n```","id":"c01cfc29380e1e8d","x":3588,"y":1275,"width":420,"height":200},
		{"type":"text","text":"init_params\nðŸŸ¢ pthread_mutex_init --> ðŸ”´ end_thread\nðŸŸ¢ pthread_mutex_init --> ðŸ”´ end_thread\nðŸŸ¢ malloc --> ðŸ”´ end_thread\nðŸŸ¢ malloc --> ðŸ”´ end_thread\n```c\np->num = ft_atoi(ag[1]);  \np->t2d = ft_atoi(ag[2]);  \np->t2e = ft_atoi(ag[3]);  \np->t2s = ft_atoi(ag[4]);  \np->max_iter = -2;  \np->check_meal = 0;  \np->start = 0;  \np->ready = 0;  \nif (ag[5])  \n{  \n   p->check_meal = 1;  \n   p->max_iter = ft_atoi(ag[5]);  \n}  \np->over = 0;    \np->death = malloc(sizeof(pthread_mutex_t));\np->fork = malloc(sizeof(pthread_mutex_t) * p->num);   \npthread_mutex_init(p->death, NULL)\nwhile (++i < p->num)  \n   pthread_mutex_init(&p->fork[i], NULL)\n```","id":"23ca1e19f9a140e7","x":2438,"y":-880,"width":560,"height":620},
		{"type":"text","text":"philosophers\n- init_philo\n- init_thread\n- check_thread\n- end_thread","id":"f71a51804df9a483","x":2438,"y":-200,"width":282,"height":200},
		{"type":"text","text":"init_philo\nðŸŸ¢ malloc --> ðŸ”´ end_thread\n```c\nt_philo *philo;  \n  \nphilo = malloc(sizeof(t_philo) * params->num);\nwhile (++i < p->num)  \n{  \n   philo[i].id = i;  \n   philo[i].dead = 0;  \n   philo[i].iter_num = 0;  \n   philo[i].thread_start = 0;  \n   philo[i].meal = 0;  \n   philo[i].par = p;  \n   philo[i].lf = &p->fork[i];  \n   philo[i].rf = 0;  \n}\n```","id":"bc6ce8dd842a0d2e","x":2750,"y":-140,"width":500,"height":445},
		{"type":"text","text":"init_thread\nðŸŸ¢ pthread_create\n```c\nwhile (++i < p->num)  \n{  \n   philo[i].rf = philo[(i + 1) % p->num].lf;  \n   pthread_create(&philo[i].life_tid, NULL, &thread_routine, &philo[i]) \n}  \np->start = time_now();  \nwhile (++i < p->num)  \n{  \n   philo[i].thread_start = p->start;  \n   philo[i].meal = p->start;  \n}  \np->ready = 1;\n```","id":"cd6a3403f8d7989c","x":2750,"y":330,"width":690,"height":400},
		{"type":"text","text":"check_thread\n```c\nwhile (!p->ready)  \n   continue ;  \nwhile (!p->over)  \n{  \n   i = -1;  \n   while (++i < p->num)  \n      if (check_death(&philo[i]) || check_meals(philo[i], i))  \n         p->over = 1;  \n}  \nif (p->check_meal && philo[p->num - 1].iter_num == p->max_iter)  \n{  \n   ft_usleep(5 * p->num);  \n   printf(\"                  \\n\");  \n   printf(\"  All philosophers have eaten %d times\\n\", p->max_iter);  \n   return (final_print(1));  \n}\n```","id":"9851736b8e1e9e81","x":2758,"y":840,"width":650,"height":460},
		{"type":"text","text":"end_thread\n```c\nwhile (++i < p->num)  \n   pthread_join(philo[i].life_tid, (void *)&philo[i]);  \npthread_mutex_destroy(p->death);  \npthread_mutex_destroy(p->fork);  \nfree(p->death);  \nfree(p->fork);  \nfree(philo);\n```","id":"2d5a21a36719c234","x":2758,"y":1320,"width":570,"height":260},
		{"type":"text","text":"main\n- init_params\n- philosophers","id":"8f4d7544ce5ef619","x":2114,"y":-880,"width":282,"height":200},
		{"id":"29dcd068115599b2","x":-480,"y":955,"width":300,"height":205,"type":"text","text":"### main\n1. Chek correct number of argc\n2. ft_init_env\n3. ft_start_simulation"},
		{"type":"text","text":"### ft_init_env\nðŸŸ¢ [forks] malloc --> ðŸ”´ end_thread\nðŸŸ¢ [forks] pthread_mutex_init --> ðŸ”´ end_thread\n\n```c\nint ft_init_env(char **argv, t_env *env)  \n{  \n   int    i;  \n  \n   env->nb_philo = ft_atoi(argv[1]);  \n   env->time_to_die = ft_atoi(argv[2]);  \n   env->time_to_eat = ft_atoi(argv[3]);  \n   env->time_to_sleep = ft_atoi(argv[4]);  \n   if (argv[5])  \n      env->philo_must_eat = ft_atoi(argv[5]);  \n   env->fork = malloc(sizeof(pthread_mutex_t) * env->nb_philo);  \n   i = 0;  \n   while (i < env->nb_philo)  \n   {  \n      (pthread_mutex_init(&env->fork[i], NULL));  \n      i++;  \n   }  \n   env->is_ready = FALSE;  \n   return (0);  \n}\n```","id":"2e226b1794877421","x":-125,"y":1028,"width":705,"height":612},
		{"type":"text","text":"### ft_start_simulation\nðŸŸ¢ [forks] malloc --> ðŸ”´ end_thread\nðŸŸ¢ [forks] pthread_mutex_init --> ðŸ”´ end_thread\n\n```c\nstatic int  ft_start_simulation(t_env *env)  \n{  \n   t_philo    *philo;  \n  \n   philo = malloc(sizeof(t_philo) * env->nb_philo);  \n   if (!philo)  \n      return (EXIT_FAILURE);  \n   ft_init_philos(philo, env);  \n   ft_display_philos(philo, env);  \n   ft_init_threads(philo, env);  \n   env->start_time = ft_now();  \n   env->is_ready = TRUE;  \n   ft_end_threads(philo, env);  \n   return (EXIT_SUCCESS);  \n}\n```","id":"b6f57b8cc8d84f3a","x":-125,"y":1720,"width":760,"height":585}
	],
	"edges":[
		{"id":"11b6e10176e5ae14","fromNode":"2026e87a4ce4ad1d","fromSide":"right","toNode":"73f156db3c677dce","toSide":"left"},
		{"id":"404bc2658684c00a","fromNode":"73f156db3c677dce","fromSide":"right","toNode":"3869ba962a6dd5b7","toSide":"left"},
		{"id":"3908a2772cb20ed4","fromNode":"b1ee01fbe8ad6614","fromSide":"bottom","toNode":"70927ef15300d652","toSide":"left"},
		{"id":"8d49d2f68afc12de","fromNode":"b1ee01fbe8ad6614","fromSide":"bottom","toNode":"64761c199004a5f4","toSide":"left"},
		{"id":"25445e3913878c1a","fromNode":"c9c2724fcf1e9fbf","fromSide":"right","toNode":"2026e87a4ce4ad1d","toSide":"left"},
		{"id":"fed91a04055056a6","fromNode":"8f4d7544ce5ef619","fromSide":"bottom","toNode":"23ca1e19f9a140e7","toSide":"left"},
		{"id":"80dff39acd77f3b5","fromNode":"8f4d7544ce5ef619","fromSide":"bottom","toNode":"f71a51804df9a483","toSide":"left"},
		{"id":"dc1179393dda724c","fromNode":"f71a51804df9a483","fromSide":"bottom","toNode":"bc6ce8dd842a0d2e","toSide":"left"},
		{"id":"8419ca8fae04e052","fromNode":"f71a51804df9a483","fromSide":"bottom","toNode":"cd6a3403f8d7989c","toSide":"left"},
		{"id":"9d39fc4486da4ac3","fromNode":"f71a51804df9a483","fromSide":"bottom","toNode":"2d5a21a36719c234","toSide":"left"},
		{"id":"1568aedd555d71ca","fromNode":"f71a51804df9a483","fromSide":"bottom","toNode":"9851736b8e1e9e81","toSide":"left"},
		{"id":"fe3836c487ad8ddd","fromNode":"9851736b8e1e9e81","fromSide":"right","toNode":"8b9789b337f82d2b","toSide":"left"},
		{"id":"7a59757574a2a0e4","fromNode":"9851736b8e1e9e81","fromSide":"right","toNode":"c01cfc29380e1e8d","toSide":"left"},
		{"id":"6f8d338356f1f2ae","fromNode":"cd6a3403f8d7989c","fromSide":"right","toNode":"e3781bdc7018687d","toSide":"left"},
		{"id":"84e48f75e4094d9a","fromNode":"e3781bdc7018687d","fromSide":"right","toNode":"fc05a5d9d8b20dfb","toSide":"left"},
		{"id":"40ddca5a29aefb39","fromNode":"e3781bdc7018687d","fromSide":"right","toNode":"69a20f51496800da","toSide":"left"},
		{"id":"fe2fb1b9576de855","fromNode":"8b9789b337f82d2b","fromSide":"right","toNode":"832e5ab84b5e4d0c","toSide":"left"},
		{"id":"ff42eb2108ad35ab","fromNode":"fc05a5d9d8b20dfb","fromSide":"right","toNode":"870fd923d0b2f58d","toSide":"left"},
		{"id":"1c4f39a8de8a5bf6","fromNode":"69a20f51496800da","fromSide":"right","toNode":"870fd923d0b2f58d","toSide":"left"},
		{"id":"e6e34d85bc8aab60","fromNode":"832e5ab84b5e4d0c","fromSide":"right","toNode":"870fd923d0b2f58d","toSide":"left"},
		{"id":"3129c478769c2856","fromNode":"29dcd068115599b2","fromSide":"bottom","toNode":"2e226b1794877421","toSide":"left"},
		{"id":"0b92ed5003244fb2","fromNode":"29dcd068115599b2","fromSide":"bottom","toNode":"b6f57b8cc8d84f3a","toSide":"left"}
	]
}